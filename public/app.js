!function(e){"use strict";if("undefined"==typeof Promise&&(e.Promise=function(e){var t=this;function reject(e){"pending"===t.state&&(t.state="rejected",t.value=e,t.handlers.forEach(handle),t.handlers=null)}function handle(e){"pending"===t.state?t.handlers.push(e):("fulfilled"===t.state&&"function"==typeof e.onFulfilled&&e.onFulfilled(t.value),"rejected"===t.state&&"function"==typeof e.onRejected&&e.onRejected(t.value))}this.state="pending",this.value=void 0,this.handlers=[],this.then=function(e,t){return new Promise(function(n,s){handle({onFulfilled:function(t){try{n(e?e(t):t)}catch(e){s(e)}},onRejected:function(e){try{n(t?t(e):e)}catch(e){s(e)}}})})},this.catch=function(e){return this.then(null,e)};try{e(function(e){"pending"===t.state&&(t.state="fulfilled",t.value=e,t.handlers.forEach(handle),t.handlers=null)},reject)}catch(e){reject(e)}},Promise.resolve=function(e){return new Promise(function(t){t(e)})},Promise.reject=function(e){return new Promise(function(t,n){n(e)})},Promise.all=function(e){return new Promise(function(t,n){var s=[],a=e.length;0!==a?e.forEach(function(e,o){Promise.resolve(e).then(function(e){s[o]=e,0===--a&&t(s)},n)}):t(s)})}),"undefined"==typeof fetch&&(e.fetch=function(e,t){return new Promise(function(n,s){var a=new XMLHttpRequest;t=t||{},a.open(t.method||"GET",e,!0),t.headers&&Object.keys(t.headers).forEach(function(e){a.setRequestHeader(e,t.headers[e])}),a.onload=function(){n({status:a.status,statusText:a.statusText,text:function(){return Promise.resolve(a.responseText)},json:function(){return Promise.resolve(JSON.parse(a.responseText))}})},a.onerror=function(){s(new Error("Network error"))},a.send(t.body||null)})}),Object.assign||(Object.assign=function(e){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1;n<arguments.length;n++){var s=arguments[n];if(null!=s)for(var a in s)Object.prototype.hasOwnProperty.call(s,a)&&(t[a]=s[a])}return t}),Array.from||(Array.from=function(e,t,n){for(var s=Object(e),a=parseInt(s.length)||0,o="function"==typeof this?Object(new this(a)):new Array(a),i=0;i<a;){var r=s[i];o[i]=t?void 0===n?t(r,i):t.call(n,r,i):r,i++}return o.length=a,o}),Array.prototype.includes||(Array.prototype.includes=function(e,t){var n=Object(this),s=parseInt(n.length)||0;if(0===s)return!1;for(var a=parseInt(t)||0,o=a>=0?a:Math.max(s+a,0);o<s;){if(n[o]===e)return!0;o++}return!1}),String.prototype.includes||(String.prototype.includes=function(e,t){return"number"!=typeof t&&(t=0),-1!==this.indexOf(e,t)}),String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return t=t||0,this.substr(t,e.length)===e}),String.prototype.endsWith||(String.prototype.endsWith=function(e,t){return(void 0===t||t>this.length)&&(t=this.length),this.substring(t-e.length,t)===e}),e.performance||(e.performance={}),!e.performance.now){var t=Date.now();e.performance.now=function(){return Date.now()-t}}e.console||(e.console={log:function(){},error:function(){},warn:function(){},info:function(){},debug:function(){},trace:function(){}}),e.requestAnimationFrame||(e.requestAnimationFrame=function(e){return setTimeout(e,16)},e.cancelAnimationFrame=function(e){clearTimeout(e)}),e.CustomEvent&&"function"==typeof e.CustomEvent||(e.CustomEvent=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:null};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}),"undefined"==typeof BigInt&&(console.warn("BigInt is not supported in this browser. Some features may not work."),e.BigInt=function(e){if("number"==typeof e&&Number.isInteger(e))return{value:e,toString:function(){return this.value.toString()}};throw new Error("BigInt polyfill: Invalid input")})}("undefined"!=typeof window?window:"undefined"!=typeof global?global:this),function(){"use strict";"undefined"==typeof Promise&&(window.Promise=require("es6-promise").Promise),"function"!=typeof Object.assign&&(Object.assign=function(e,t){if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(e),s=1;s<arguments.length;s++){var a=arguments[s];if(null!=a)for(var o in a)Object.prototype.hasOwnProperty.call(a,o)&&(n[o]=a[o])}return n}),Array.from||(Array.from=function(e,t,n){var s=Object(e);if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");var a=void 0===t?void 0:t;if(void 0!==a&&"function"!=typeof a)throw new TypeError("Array.from: when provided, the second argument must be a function");for(var o,i=parseInt(s.length),r="function"==typeof this?Object(new this(i)):new Array(i),c=0;c<i;)o=s[c],r[c]=a?void 0===n?a(o,c):a.call(n,o,c):o,c+=1;return r.length=i,r}),"undefined"==typeof console&&(window.console={log:function(){},error:function(){},warn:function(){},info:function(){}}),window.performance||(window.performance={}),window.performance.now||(window.performance.now=function(){return Date.now()})}();class PrivacyTaxCalculatorApp{constructor(){this.provider=null,this.signer=null,this.contract=null,this.account=null,this.chainId=null,this.selectedScenario=null,this.isConnecting=!1,this.pendingTransactions=new Map,this.contractAddress="0x2d6A5EA57197E1cf21C641456f573d086349087d",this.contractABI=["constructor()","function VERSION() external view returns (uint256)","function owner() external view returns (address)","function totalTaxpayers() external view returns (uint256)","function hasSubmitted(address) external view returns (bool)","function submitTaxInfo(bytes32[2] calldata encryptedIncome, bytes calldata incomeProof, bytes32[2] calldata encryptedDeductions, bytes calldata deductionsProof) external payable","function calculateTax() external","function getTaxOwed() external view returns (bytes32[2] memory)","function isCalculated(address taxpayer) external view returns (bool)","function getSubmissionTime(address taxpayer) external view returns (uint256)","function getCalculationTime(address taxpayer) external view returns (uint256)","function getContractStats() external view returns (uint256, uint256, address, uint256)","function clearTaxRecord() external","function hasValidTaxRecord(address taxpayer) external view returns (bool)","event TaxSubmitted(address indexed taxpayer, uint256 timestamp, bytes32 indexed txHash)","event TaxCalculated(address indexed taxpayer, uint256 timestamp, bytes32 indexed txHash)","event TaxRecordCleared(address indexed taxpayer, uint256 timestamp)"],this.sepoliaConfig={chainId:"0xaa36a7",chainName:"Sepolia Test Network",nativeCurrency:{name:"ETH",symbol:"ETH",decimals:18},rpcUrls:["https://sepolia.infura.io/v3/","https://rpc.sepolia.org/"],blockExplorerUrls:["https://sepolia.etherscan.io/"]},this.scenarios={low:{income:3e4,deductions:5e3,description:"Low Income Scenario",expectedTax:2500,gasEstimate:"150000"},medium:{income:75e3,deductions:12e3,description:"Medium Income Scenario",expectedTax:10800,gasEstimate:"180000"},high:{income:15e4,deductions:25e3,description:"High Income Scenario",expectedTax:29e3,gasEstimate:"200000"},custom:{income:0,deductions:0,description:"Custom Amount",expectedTax:0,gasEstimate:"200000"}},this.init()}async init(){this.setupEventListeners(),await this.checkWalletConnection(),this.updateUI()}setupEventListeners(){window.ethereum&&(window.ethereum.on("accountsChanged",e=>{0===e.length?this.disconnect():e[0]!==this.account&&this.handleAccountChange(e[0])}),window.ethereum.on("chainChanged",e=>{e!==this.sepoliaConfig.chainId?(this.showMessage("Please switch to Sepolia testnet","warning"),this.requestNetworkSwitch()):window.location.reload()}),window.ethereum.on("disconnect",()=>{this.disconnect()}))}async checkWalletConnection(){if(window.ethereum)try{(await window.ethereum.request({method:"eth_accounts"})).length>0&&await this.connectWallet()}catch(e){console.error("Error checking wallet connection:",e)}else this.showMessage("MetaMask not detected. Please install MetaMask to use this application.","error")}async handleAccountChange(e){this.account=e,document.getElementById("connectBtn").textContent=`${e.slice(0,6)}...${e.slice(-4)}`,await this.updateTaxStatus()}disconnect(){this.provider=null,this.signer=null,this.contract=null,this.account=null,this.chainId=null,document.getElementById("connectBtn").textContent="Connect Wallet",document.getElementById("connectBtn").classList.remove("connected"),document.getElementById("taxStatus").style.display="none",document.getElementById("scenarioSection").style.display="none",this.showMessage("Wallet disconnected","info")}async connectWallet(){if(!this.isConnecting)try{if(this.isConnecting=!0,this.showMessage("Connecting to MetaMask...","info"),!window.ethereum)throw new Error("MetaMask not installed");if(0===(await window.ethereum.request({method:"eth_requestAccounts"})).length)throw new Error("No accounts available");const e=await window.ethereum.request({method:"eth_chainId"});e!==this.sepoliaConfig.chainId&&await this.requestNetworkSwitch(),this.provider=new ethers.BrowserProvider(window.ethereum),this.signer=await this.provider.getSigner(),this.account=await this.signer.getAddress(),this.chainId=e,this.contract=new ethers.Contract(this.contractAddress,this.contractABI,this.signer),document.getElementById("connectBtn").textContent=`${this.account.slice(0,6)}...${this.account.slice(-4)}`,document.getElementById("connectBtn").classList.add("connected"),document.getElementById("taxpayerAddress").textContent=this.account,document.getElementById("accountAddress").textContent=`${this.account.slice(0,10)}...${this.account.slice(-8)}`,await this.updateAccountBalance(),await this.verifyContractConnection(),document.getElementById("taxStatus").style.display="block",document.getElementById("scenarioSection").style.display="block",await this.updateTaxStatus(),await this.loadContractStats(),this.showMessage("✅ Connected to Sepolia testnet!","success")}catch(e){console.error("Wallet connection failed:",e),4001===e.code?this.showMessage("❌ Connection rejected by user","warning"):-32002===e.code?this.showMessage("⏳ Connection request already pending in MetaMask","warning"):4900===e.code?this.showMessage("❌ MetaMask is disconnected","error"):4901===e.code?this.showMessage("❌ MetaMask does not support Sepolia network","error"):e.message?.includes("No accounts")?this.showMessage("❌ No accounts available in MetaMask","error"):e.message?.includes("MetaMask not installed")?this.showMessage("❌ MetaMask not detected. Please install MetaMask browser extension.","error"):e.message?.includes("network")?this.showMessage("❌ Network connection failed. Please check your internet.","error"):this.showMessage(`❌ Connection failed: ${e.message||"Unknown error"}`,"error")}finally{this.isConnecting=!1}}async requestNetworkSwitch(){try{await window.ethereum.request({method:"wallet_switchEthereumChain",params:[{chainId:this.sepoliaConfig.chainId}]})}catch(e){if(4902!==e.code)throw 4001===e.code?(this.showMessage("❌ Network switch rejected by user","warning"),e):(this.showMessage("❌ Failed to switch to Sepolia network","error"),e);try{await window.ethereum.request({method:"wallet_addEthereumChain",params:[this.sepoliaConfig]}),this.showMessage("✅ Sepolia network added to MetaMask","success")}catch(e){throw console.error("Failed to add network:",e),4001===e.code?this.showMessage("❌ Network addition rejected by user","warning"):this.showMessage("❌ Failed to add Sepolia network to MetaMask","error"),e}}}async verifyContractConnection(){try{const e=await this.contract.VERSION();await this.contract.owner(),this.updateNetworkStatus(`Sepolia (Contract v${e})`)}catch(e){console.error("Contract verification failed:",e),this.showMessage("⚠️ Contract verification failed. Please check deployment.","warning")}}async loadContractStats(){try{const[e,t,n,s]=await this.contract.getContractStats();document.getElementById("totalTaxpayers").textContent=e.toString(),document.getElementById("contractOwner").textContent=`${n.slice(0,10)}...${n.slice(-8)}`,document.getElementById("deploymentTime").textContent=new Date(1e3*Number(t)).toLocaleDateString(),document.getElementById("contractVersion").textContent=s.toString(),document.getElementById("contractStats").style.display="block",document.getElementById("refreshBtn").style.display="inline-block"}catch(e){console.error("Failed to load contract stats:",e)}}updateNetworkStatus(e){document.getElementById("networkStatus").textContent=e}async updateAccountBalance(){try{if(this.provider&&this.account){const e=await this.provider.getBalance(this.account),t=ethers.formatEther(e),n=parseFloat(t).toFixed(4),s=document.getElementById("accountBalance");s&&(s.textContent=`${n} ETH`)}}catch(e){console.error("Failed to update account balance:",e)}}async updateTaxStatus(){if(this.contract&&this.account)try{const e=await this.contract.hasSubmitted(this.account),t=!!e&&await this.contract.isCalculated(this.account);let n="",s=!1,a=!1,o=!1;if(e)if(t){n="✅ Tax calculated - Ready to view encrypted result",o=!0;const e=await this.contract.getSubmissionTime(this.account),t=await this.contract.getCalculationTime(this.account);document.getElementById("submissionTime").textContent=new Date(1e3*Number(e)).toLocaleString(),document.getElementById("calculationTime").textContent=new Date(1e3*Number(t)).toLocaleString()}else{n="🔄 Ready to calculate tax privately",a=!0;const e=await this.contract.getSubmissionTime(this.account);document.getElementById("submissionTime").textContent=new Date(1e3*Number(e)).toLocaleString()}else n="📝 Ready to submit tax information",s=!0;document.getElementById("statusMessage").textContent=n,document.getElementById("submitBtn").style.display=s?"inline-block":"none",document.getElementById("calculateBtn").style.display=a?"inline-block":"none",document.getElementById("viewBtn").style.display=o?"inline-block":"none",document.getElementById("clearBtn").style.display=e?"inline-block":"none"}catch(e){console.error("Error updating tax status:",e),this.showMessage("Failed to load tax status","error")}}calculateEstimatedTax(e,t){const n=Math.max(0,e-t);let s=0;return s=n<=5e4?.1*n:n<=1e5?5e3+.2*(n-5e4):15e3+.3*(n-1e5),Math.round(s)}showMessage(e,t="info"){const n=document.getElementById("messageBox");document.getElementById("statusText").textContent=`> ${e}`,n.style.display="block",n.className=`message-box ${t}`,"success"!==t&&"info"!==t||setTimeout(()=>{n.style.display="none"},5e3)}handleBlockchainError(e,t="operation"){return console.error(`${t} failed:`,e),4001===e.code?`❌ ${t} cancelled by user`:-32e3===e.code?"❌ Insufficient funds for gas fees. Please add more Sepolia ETH.":-32002===e.code?`⏳ ${t} request already pending in MetaMask`:-32003===e.code?"❌ Transaction rejected due to invalid parameters":4100===e.code?"❌ Unauthorized account. Please connect your wallet.":4200===e.code?"❌ Unsupported method by wallet":4900===e.code?"❌ Wallet disconnected. Please reconnect.":4901===e.code?"❌ Wallet does not support the requested chain":e.message?.includes("insufficient funds")?"❌ Insufficient ETH balance for transaction":e.message?.includes("gas")?"❌ Gas estimation failed. Transaction may fail.":e.message?.includes("nonce")?"❌ Transaction nonce error. Please reset MetaMask account.":e.message?.includes("network")?"❌ Network error. Please check your connection.":e.message?.includes("reverted")?"❌ Contract execution reverted. Check transaction requirements.":`❌ ${t} failed: ${e.message||"Unknown error"}`}async estimateGasForSubmission(e,t){try{const n=[ethers.keccak256(ethers.toUtf8Bytes(e.toString())),ethers.ZeroHash],s=[ethers.keccak256(ethers.toUtf8Bytes(t.toString())),ethers.ZeroHash];return 120n*await this.contract.submitTaxInfo.estimateGas(n,"0x00",s,"0x00")/100n}catch(e){return console.error("Gas estimation failed:",e),200000n}}async submitTaxInfo(){if(!this.contract||!this.selectedScenario)return void this.showMessage("Please select a tax scenario first!","error");let e,t;if("custom"===this.selectedScenario){if(e=parseInt(document.getElementById("incomeInput").value)||0,t=parseInt(document.getElementById("deductionsInput").value)||0,e<=0)return void this.showMessage("Please enter valid income amount!","error");if(t>e)return void this.showMessage("Deductions cannot exceed income!","error")}else{const n=this.scenarios[this.selectedScenario];e=n.income,t=n.deductions}try{this.showMessage("Preparing encrypted tax submission...","info");const n=await this.provider.getBalance(this.account),s=ethers.formatEther(n);if(parseFloat(s)<.01)return void this.showMessage("Insufficient Sepolia ETH for gas fees. Please get testnet ETH from faucet.","error");const a=await this.estimateGasForSubmission(e,t),o=await this.provider.getFeeData(),i=a*(o.gasPrice||0n);this.showMessage(`Gas estimate: ${a.toString()} units (~${ethers.formatEther(i)} ETH)`,"info");const r=Date.now(),c=[ethers.keccak256(ethers.toUtf8Bytes(e.toString()+r)),ethers.ZeroHash],l=[ethers.keccak256(ethers.toUtf8Bytes(t.toString()+r)),ethers.ZeroHash],d=ethers.toUtf8Bytes(`proof_income_${e}_${r}`),u=ethers.toUtf8Bytes(`proof_deductions_${t}_${r}`);this.showMessage("🔐 Submitting encrypted tax information to blockchain...","info");const h=await this.contract.submitTaxInfo(c,d,l,u,{gasLimit:a,gasPrice:o.gasPrice});this.showMessage(`Transaction submitted! Hash: ${h.hash}`,"info"),this.addPendingTransaction(h.hash,"Tax Submission"),this.showMessage("⏳ Waiting for blockchain confirmation...","info");const m=await h.wait();if(this.removePendingTransaction(h.hash),1===m.status){const e=m.gasUsed,t=e*m.gasPrice;this.showMessage(`✅ Tax information submitted successfully!\nGas used: ${e.toString()}\nCost: ${ethers.formatEther(t)} ETH\nBlock: ${m.blockNumber}`,"success"),"custom"===this.selectedScenario&&(document.getElementById("incomeInput").value="",document.getElementById("deductionsInput").value=""),await this.updateTaxStatus()}else this.showMessage("❌ Transaction failed","error")}catch(e){console.error("Submit tax info failed:",e),4001===e.code?this.showMessage("❌ Transaction cancelled by user","warning"):-32e3===e.code?this.showMessage("❌ Insufficient funds for gas fees. Please add more Sepolia ETH.","error"):-32002===e.code?this.showMessage("⏳ Transaction request already pending in MetaMask","warning"):-32003===e.code?this.showMessage("❌ Transaction rejected due to invalid parameters","error"):4100===e.code?this.showMessage("❌ Unauthorized account. Please connect your wallet.","error"):4200===e.code?this.showMessage("❌ Unsupported method by wallet","error"):4900===e.code?this.showMessage("❌ Wallet disconnected. Please reconnect.","error"):4901===e.code?this.showMessage("❌ Wallet does not support the requested chain","error"):e.message?.includes("insufficient funds")?this.showMessage("❌ Insufficient ETH balance for transaction","error"):e.message?.includes("gas")?this.showMessage("❌ Gas estimation failed. Transaction may fail.","error"):e.message?.includes("nonce")?this.showMessage("❌ Transaction nonce error. Please reset MetaMask account.","error"):e.message?.includes("network")?this.showMessage("❌ Network error. Please check your connection.","error"):e.message?.includes("reverted")?this.showMessage("❌ Contract execution reverted. Check transaction requirements.","error"):this.showMessage(`❌ Transaction failed: ${e.message||"Unknown error"}`,"error")}}async calculateTax(){if(this.contract)try{this.showMessage("🧮 Preparing tax calculation transaction...","info");const e=120n*await this.contract.calculateTax.estimateGas()/100n,t=await this.provider.getFeeData(),n=e*(t.gasPrice||0n);this.showMessage(`Gas estimate: ${e.toString()} units (~${ethers.formatEther(n)} ETH)`,"info");const s=await this.contract.calculateTax({gasLimit:e,gasPrice:t.gasPrice});this.showMessage(`Calculation transaction submitted! Hash: ${s.hash}`,"info"),this.addPendingTransaction(s.hash,"Tax Calculation"),this.showMessage("⏳ Performing private tax calculation on blockchain...","info");const a=await s.wait();if(this.removePendingTransaction(s.hash),1===a.status){const e=a.gasUsed,t=e*a.gasPrice;this.showMessage(`✅ Tax calculated successfully using FHE!\nGas used: ${e.toString()}\nCost: ${ethers.formatEther(t)} ETH\nBlock: ${a.blockNumber}`,"success"),await this.updateTaxStatus()}else this.showMessage("❌ Calculation failed","error")}catch(e){console.error("Calculate tax failed:",e),4001===e.code?this.showMessage("❌ Calculation cancelled by user","warning"):-32e3===e.code?this.showMessage("❌ Insufficient funds for gas fees","error"):-32002===e.code?this.showMessage("⏳ Calculation request already pending in MetaMask","warning"):e.message?.includes("insufficient funds")?this.showMessage("❌ Insufficient ETH balance for calculation","error"):e.message?.includes("reverted")?this.showMessage("❌ Calculation reverted. Ensure you have submitted tax info first.","error"):e.message?.includes("network")?this.showMessage("❌ Network error during calculation","error"):this.showMessage(`❌ Calculation failed: ${e.message||"Unknown error"}`,"error")}else this.showMessage("Please connect your wallet first!","error")}async viewTaxResult(){if(this.contract)try{this.showMessage("🔍 Retrieving your encrypted tax result...","info"),await this.contract.getTaxOwed(),this.showMessage("✅ Your tax has been calculated privately!\n\n🔐 Encrypted Result Retrieved:\nThe tax calculation is complete and stored encrypted on the blockchain.\n\n📊 In a production system with full FHE integration:\n• You would use your private key to decrypt the result\n• The decryption would happen locally in your browser\n• No one else can see your actual tax amount\n\n🔗 View transaction on Sepolia Etherscan for verification","success")}catch(e){console.error("View result failed:",e),this.showMessage(`Failed to retrieve tax result: ${e.message}`,"error")}else this.showMessage("Please connect your wallet first!","error")}async clearTaxRecord(){if(this.contract&&confirm("Are you sure you want to clear your tax record? This action cannot be undone."))try{this.showMessage("🗑️ Clearing tax record...","info");const e=120n*await this.contract.clearTaxRecord.estimateGas()/100n,t=await this.provider.getFeeData(),n=await this.contract.clearTaxRecord({gasLimit:e,gasPrice:t.gasPrice});this.showMessage(`Clear transaction submitted! Hash: ${n.hash}`,"info"),this.addPendingTransaction(n.hash,"Clear Record");const s=await n.wait();this.removePendingTransaction(n.hash),1===s.status&&(this.showMessage("✅ Tax record cleared successfully!","success"),await this.updateTaxStatus(),this.selectedScenario=null,document.querySelectorAll(".scenario-btn").forEach(e=>e.classList.remove("selected")),document.getElementById("selectedScenario").style.display="none",document.getElementById("taxInputs").style.display="none")}catch(e){console.error("Clear record failed:",e),4001===e.code?this.showMessage("❌ Clear operation cancelled by user","warning"):-32e3===e.code?this.showMessage("❌ Insufficient funds for gas fees","error"):-32002===e.code?this.showMessage("⏳ Clear request already pending in MetaMask","warning"):e.message?.includes("insufficient funds")?this.showMessage("❌ Insufficient ETH balance for clear operation","error"):e.message?.includes("reverted")?this.showMessage("❌ Clear operation reverted. You may not have a tax record to clear.","error"):e.message?.includes("network")?this.showMessage("❌ Network error during clear operation","error"):this.showMessage(`❌ Failed to clear record: ${e.message||"Unknown error"}`,"error")}}addPendingTransaction(e,t){this.pendingTransactions.set(e,{description:t,timestamp:Date.now()}),this.updatePendingTransactionsDisplay(),this.showTransactionMonitor(e,t)}removePendingTransaction(e){this.pendingTransactions.delete(e),this.updatePendingTransactionsDisplay(),this.hideTransactionMonitor()}updatePendingTransactionsDisplay(){const e=this.pendingTransactions.size;e>0&&this.showMessage(`⏳ ${e} transaction${e>1?"s":""} pending confirmation...`,"info")}showTransactionMonitor(e,t){const n=document.getElementById("transactionMonitor"),s=document.getElementById("txHash"),a=document.getElementById("txStatus"),o=document.getElementById("gasUsed"),i=document.getElementById("blockNumber");n&&s&&a&&o&&i&&(s.textContent=`${e.slice(0,10)}...${e.slice(-8)}`,a.textContent="Confirming...",o.textContent="Calculating...",i.textContent="Pending...",n.style.display="block",this.monitorTransaction(e))}async monitorTransaction(e){try{const t=await this.provider.getTransaction(e);if(t){const n=document.getElementById("gasUsed"),s=document.getElementById("blockNumber"),a=document.getElementById("txStatus");n&&(n.textContent=`Limit: ${t.gasLimit.toString()}`);const o=await t.wait();if(o){n&&(n.textContent=o.gasUsed.toString()),s&&(s.textContent=o.blockNumber.toString()),a&&(a.textContent=1===o.status?"Confirmed ✅":"Failed ❌");const t=document.getElementById("lastTxHash");t&&(t.textContent=`${e.slice(0,10)}...${e.slice(-8)}`)}}}catch(e){console.error("Transaction monitoring failed:",e)}}hideTransactionMonitor(){const e=document.getElementById("transactionMonitor");e&&setTimeout(()=>{e.style.display="none"},3e3)}updateUI(){const e=document.getElementById("submitBtn"),t=document.getElementById("calculateBtn"),n=document.getElementById("viewBtn"),s=document.getElementById("clearBtn");e&&(e.style.display="none"),t&&(t.style.display="none"),n&&(n.style.display="none"),s&&(s.style.display="none")}}function selectScenario(e){if(document.querySelectorAll(".scenario-btn").forEach(e=>{e.classList.remove("selected")}),event.target.classList.add("selected"),taxCalculator.selectedScenario=e,"custom"===e)document.getElementById("taxInputs").style.display="block",document.getElementById("selectedScenario").style.display="none";else{const t=taxCalculator.scenarios[e],n=taxCalculator.calculateEstimatedTax(t.income,t.deductions);document.getElementById("displayIncome").textContent=`$${t.income.toLocaleString()}`,document.getElementById("displayDeductions").textContent=`$${t.deductions.toLocaleString()}`,document.getElementById("estimatedTax").textContent=`$${n.toLocaleString()}`,document.getElementById("selectedScenario").style.display="block",document.getElementById("taxInputs").style.display="none"}}async function connectWallet(){await taxCalculator.connectWallet()}async function submitTaxInfo(){await taxCalculator.submitTaxInfo()}async function calculateTax(){await taxCalculator.calculateTax()}async function viewTaxResult(){await taxCalculator.viewTaxResult()}async function clearTaxRecord(){await taxCalculator.clearTaxRecord()}async function refreshContractStats(){await taxCalculator.loadContractStats(),taxCalculator.showMessage("✅ Contract statistics refreshed!","success")}const taxCalculator=new PrivacyTaxCalculatorApp;